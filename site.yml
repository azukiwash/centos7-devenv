---
- hosts: vagrant
  user: vagrant
  vars:
    user: vagrant
    home_dir: /home/{{ user }}

  tasks:
  - name: Update to latest.
    sudo: yes
    yum: name=* state=latest

  - name: ensure epel Repo are at the latest version
    sudo: yes
    yum: name="epel-release" state=latest

  - name: ensure sl is at the present version
    sudo: yes
    yum: name=sl state=present

  - name: ensure git is at the present version
    sudo: yes
    yum: name=git state=present

  - name: ensure Development tools are at the latest version
    sudo: yes
    yum: name="@Development tools" state=latest

  - name: ensure openssl-devel is at the present version
    sudo: yes
    yum: name=openssl-devel state=present

  - name: ensure libyaml-devel is at the present version
    sudo: yes
    yum: name=libyaml-devel state=present

  - name: ensure readline-devel is at the present version
    sudo: yes
    yum: name=readline-devel state=present

  - name: ensure sqlite-devel is at the present version
    sudo: yes
    yum: name=sqlite-devel state=present

  - name: ensure xz-devel is at the present version
    sudo: yes
    yum: name=xz-devel state=present

  - name: ensure pcre-devel is at the present version
    sudo: yes
    yum: name=pcre-devel state=present

  - name: ensure tree is at the present version
    sudo: yes
    yum: name=tree state=present

  - name: ensure tmux is at the present version
    sudo: yes
    yum: name=tmux state=present

  - name: ensure zsh is at the present version
    sudo: yes
    yum: name=zsh state=present

  - name: ensure vim is at the present version
    sudo: yes
    yum: name=vim state=present

  - name: ensure wget is at the present version
    sudo: yes
    yum: name=wget state=present

  - name: ensure curl is at the present version
    sudo: yes
    yum: name=curl state=present

  - name: ensure golang is at the present version
    sudo: yes
    yum: name=golang state=present

  - name: ensure docker is at the present version
    sudo: yes
    yum: name=docker state=present

  - name: ensure the_silver_searcher is at the present version
    sudo: yes
    yum: name=the_silver_searcher state=present

  - name: ensure jq is at the present version
    sudo: yes
    yum: name=jq state=present

  - name: ensure ngrep is at the present version
    sudo: yes
    yum: name=ngrep state=present

  - name: ensure nmap is at the present version
    sudo: yes
    yum: name=nmap state=present

  - name: ensure socat is at the present version
    sudo: yes
    yum: name=socat state=present

  - name: ensure login shell is zsh
    sudo: yes
    changed_when: false
    command: grep {{ user }} /etc/passwd
    register: currentshell
  - name: change login shell to zsh
    sudo: yes
    when: currentshell.stdout.find('/bin/zsh') == -1
    command: chsh -s /bin/zsh {{ user }}

  - name: get oh-my-zsh(https://github.com/robbyrussell/oh-my-zsh)
    git: repo=https://github.com/robbyrussell/oh-my-zsh.git
         dest={{ home_dir }}/.oh-my-zsh
         force=yes
  - name: copy .zshrc from oh-my-zsh template
    changed_when: false
    shell: |
      mv {{ home_dir }}/.zshrc {{ home_dir }}/.zshrc.org
      cp {{ home_dir }}/.oh-my-zsh/templates/zshrc.zsh-template {{ home_dir }}/.zshrc.0

  - name: copy zshrc fragment file from templates
    changed_when: false
    template: src=templates/zshrc.j2 dest={{ home_dir }}/.zshrc.1

  - name: mearge zshrc with fragments
    changed_when: false
    assemble: src={{ home_dir }} dest={{ home_dir }}/.zshrc regexp='\.zshrc\.[0-9]'

  - name: update zshrc
    changed_when: false
    lineinfile: dest={{ home_dir }}/.zshrc regexp=^ZSH_THEME= line='ZSH_THEME=\"sunrise\"'

  - name: remove fragment files
    changed_when: false
    command: rm {{ home_dir }}/.zshrc.0 {{ home_dir }}/.zshrc.1

  - name: get autojump(https://github.com/joelthelion/autojump)
    git: repo=https://github.com/joelthelion/autojump.git
         dest=/var/tmp/autojump
  - name: install autojump to home
    shell: |
      creates={{ home_dir }}/.autojump/bin/autojump
      cd /var/tmp/autojump
      ./install.py

  - name: get nodebrew(https://github.com/hokaccha/nodebrew)
    get_url: url=http://git.io/nodebrew
             dest=/var/tmp/nodebrew
  - name: install nodebrew
    changed_when: false
    shell: |
      cd /var/tmp
      perl nodebrew setup

  - name: get rbenv(https://github.com/sstephenson/rbenv)
    git: repo=https://github.com/sstephenson/rbenv.git
         dest={{ home_dir }}/.rbenv
  - name: get ruby-build(https://github.com/sstephenson/ruby-build)
    git: repo=https://github.com/sstephenson/ruby-build.git
         dest={{ home_dir }}/.rbenv/plugins/ruby-build

  - name: install peco(https://github.com/peco/peco) to home
    changed_when: false
    shell: |
      mkdir ~/.go
      export GOPATH="$HOME/.go"
      go get github.com/peco/peco/cmd/peco
      go get github.com/peco/migemogrep

  - name: set git config
    changed_when: false
    shell: |
      git config --global core.editor vim
      git config --global alias.l 'log --graph --name-status --pretty=format:"%C(red)%h %C(green)%an %Creset%s %C(yellow)%d%Creset"'
      git config --global color.ui auto

  - name: put .vimrc to home
    template: src=templates/vimrc.j2 dest={{ home_dir }}/.vimrc

  - name: put .tmux.conf to home
    template: src=templates/tmux_conf.j2 dest={{ home_dir }}/.tmux.conf

  - name: create peco config dir to home
    changed_when: false
    shell: |
      [ -e {{ home_dir }}/.peco ] || mkdir {{ home_dir }}/.peco
  - name: put peco config to home
    template: src=templates/peco_config.j2 dest={{ home_dir }}/.peco/config.json
